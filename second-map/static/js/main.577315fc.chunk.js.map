{"version":3,"sources":["registerServiceWorker.js","api/index.js","store/actions.js","map/MapPin.jsx","map/MapHolder.jsx","Components/ListItem.jsx","Components/List.jsx","map/Map.jsx","store/reducer.js","store/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ProjectApi","item","axios","get","concat","postcode","houseNumber","response","details","data","lon","lat","rest","Object","objectWithoutProperties","objectSpread","id","parseFloat","undefined","Error","DATA","map","updateAddress","entry","dispatch","Api","getItem","type","MapPin","_PureComponent","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","isOpen","onToggleOpen","setState","prev","inherits","createClass","key","value","_this$props$info","props","info","lng","street","city","province","react_default","a","createElement","lib","onClick","position","style","background","onCloseClick","className","PureComponent","withScriptjs","withGoogleMap","_ref","addresses","mapCenter","Pins","MapPin_MapPin","defaultZoom","defaultCenter","MarkerClusterer_default","averageCenter","enableRetinaIcons","gridSize","ListItem","List","Components_ListItem","assign","MAP_API_URL","process","Map","componentDidMount","forEach","src_Components_List","MapHolder","filter","googleMapURL","loadingElement","containerElement","mapElement","connect","items","bindActionCreators","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","action","applyMiddleware","thunk","store","getRawData","ReactDOM","render","es","src_map_Map","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.577315fc.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\nimport DATA from './addresses.json';\n\n// axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nexport default class ProjectApi {\n    \n    static getItem(item) {\n        return axios.get(`http://api.postcodedata.nl/v1/postcode/?postcode=${item.postcode}&streetnumber=${item.houseNumber}&ref=github.io&type=json`).then(response => {\n            const details = response.data.details[0];\n            let {lon, lat, postcode, ...rest} = details;\n\n            return {\n                id: item.id,\n                postcode: item.postcode,\n                lon: lon ? parseFloat(lon) : undefined,\n                lat: lat ? parseFloat(lat) : undefined,\n                ...rest\n            }\n        } , error => {\n            throw new Error(error)\n        }\n        );\n\n    }\n    static getRawData(){\n        return DATA.map(item => {\n\n                return {\n                    id: item.postcode + item.houseNumber,\n                    ...item\n                }\n            \n        });\n    }\n}","import Api from \"../api\";\n\nexport const SET_ADDRESSES = '@@secondmap/SET_ADDRESSES'\nexport const UPDATE_ADDRESS = '@@secondmap/UPDATE_ADDRESS'\n\nexport const fetchAddresses = () => (dispatch) => {\n    dispatch({\n      type: SET_ADDRESSES,\n      data : Api.getRawData()\n    })\n}\n\nexport const updateAddress = (entry) => (dispatch) => {\n  return Api.getItem(entry).then(data => {\n    dispatch({\n      type: UPDATE_ADDRESS,\n      data\n    })\n  })\n}","import React, { PureComponent } from 'react';\nimport { Marker, InfoWindow } from \"react-google-maps\";\n\nexport class MapPin extends PureComponent {\n  state = {\n    isOpen: false\n  };\n  onToggleOpen = () => {\n    this.setState((prev) => ({ isOpen: !prev.isOpen }));\n  };\n  render() {\n    const { lat, lon: lng, street, houseNumber, city, province, postcode } = this.props.info;\n    if (!lat && !lng) {\n        return null;\n    }\n\n    return (<Marker onClick={this.onToggleOpen} position={{ lat, lng }}>\n      {this.state.isOpen && <InfoWindow style={{background: 'red'}} onCloseClick={this.onToggleOpen}>\n        <div className=\"Map__hint\">\n            <h4>{street} {houseNumber}</h4>\n            <p>{city}, {province}, {postcode}</p>\n            <div className=\"Map__location\">\n            <span>Lattitude: {lat}</span>\n            <span>Longtitude: {lng}</span>\n            </div>\n            \n        </div>\n      </InfoWindow>}\n    </Marker>);\n\n\n  }\n}\n\n","import React  from 'react';\nimport { withGoogleMap, withScriptjs,  GoogleMap } from \"react-google-maps\";\nimport  MarkerClusterer  from \"react-google-maps/lib/components/addons/MarkerClusterer\";\nimport { MapPin } from './MapPin';\nconst MyMapComponent = ({addresses, mapCenter, ...rest}) => {\n  const Pins = addresses.map((item) => <MapPin key={item.id} info={item}/>)\n  return (<GoogleMap\n    defaultZoom={10}\n    defaultCenter={mapCenter}\n  >\n    <MarkerClusterer\n      averageCenter\n      enableRetinaIcons\n      gridSize={50}\n    >\n      {Pins}\n    </MarkerClusterer>\n    \n  </GoogleMap>)\n}\n\nexport default withScriptjs(withGoogleMap(MyMapComponent))\n\n\n","import React from 'react';\n\nconst ListItem = ({ postcode, city, street, province, houseNumber }) => {\n    return (<li className={`List__item${street ? ' loaded' : ''}`} >\n        {!!street \n            ? (<div>\n                <h4>{street} {houseNumber}</h4>\n                <span>{city}, {province}, {postcode}</span>\n            </div>)\n            : null\n        }\n    </li>);\n};\n\n\nexport default ListItem;","import React from 'react';\n// import {connect} from 'react-redux'\nimport './List.scss';\n// import {bindActionCreators} from 'redux';\n// import { updateAddress } from '../actions';\n\nimport ListItem from './ListItem';\n\nconst List =  ({addresses}) => {\n   return (\n    <ul className=\"List\">\n        {addresses && addresses.map(entry => (\n            <ListItem \n                key={entry.id}  \n                {...entry}\n            />\n            )\n        )}\n    </ul>\n    );\n}\n\n\n\nexport default List;","import React, { PureComponent } from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport { updateAddress } from '../store/actions';\nimport MapHolder from './MapHolder';\nimport List from '../Components/List';\n\nimport './Map.scss';\n\nconst MAP_API_URL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_MAP_KEY}&v=3.exp&libraries=places`;\n\nclass Map extends PureComponent {\n    componentDidMount = () => {\n        this.props.addresses.forEach(item => {\n            this.props.updateAddress(item);\n        })\n    }\n\n    render() {\n        \n        return (\n            <div className=\"Map\">\n                <div className=\"Map__list\">\n                    <List addresses={this.props.addresses}/>\n                </div>\n                <MapHolder \n                    addresses={this.props.addresses.filter(item => !!item.lon)}\n                    mapCenter={{lng: 4.8082529364798, lat: 52.4937795940128}}\n                    googleMapURL={MAP_API_URL}\n                    loadingElement={<div className=\"Map__loader\"/>}\n                    containerElement={<div className=\"Map__wrapper\"/>}\n                    mapElement={<div className=\"Map__holder\"/>}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    (state) => ({\n        addresses: state.addresses.items\n    }),\n    dispatch => bindActionCreators({updateAddress}, dispatch)\n    )(Map);","import * as actions from './actions'\n\nconst initialState = {\n  items: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actions.SET_ADDRESSES:\n      return {\n        ...state,\n        items: action.data\n      }\n\n    case actions.UPDATE_ADDRESS:\n      return {\n        ...state,\n        items: state.items.map(item => {\n          return item.id !== action.data.id ? item : { ...item, ...action.data }\n        })\n      }\n\n    default:\n      return state\n  }\n}","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport addressesReducer from './reducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(combineReducers({\n  addresses: addressesReducer\n}), composeEnhancers(applyMiddleware(thunk)))\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport registerServiceWorker from './registerServiceWorker';\n\nimport Map from './map/Map';\n\nimport store from './store/store'\nimport {fetchAddresses} from './store/actions' ; \n\nimport 'sanitize.css';\nimport './index.css';\n\n\nstore.dispatch(fetchAddresses())\n\nconst App = () => (\n  <Provider store={store}>\n    <Map />\n  </Provider>\n)\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}